DEFINE PROCEDURE ''RULE-ONE-DERIVES?'' [M,N]:
BLOCK 0: BEGIN
	IF {REMAINDER [M,10] = 1 AND N = M × 10}, THEN:
	OUTPUT ⇐ YES;
BLOCK 0: END.

DEFINE PROCEDURE ''RULE-TWO-DERIVES?'' [M,N]:
BLOCK 0: BEGIN
	CELL(0) ⇐ M;
	CELL(100) ⇐ 1;
	LOOP AT MOST CELL(0) TIMES:
	BLOCK 1: BEGIN
		CELL(101) ⇐ REMAINDER [CELL(0), 10];
		CELL(0) ⇐ DIVIDE [CELL(0),10];
		IF CELL(0) = 0, THEN:
		BLOCK 2: BEGIN
			IF CELL(101) = 3, THEN:
			ABORT LOOP 1;
			QUIT BLOCK 0;
		BLOCK 2: END;
		CELL(102) ⇐ CELL(100) × CELL(101);
		CELL(1) ⇐ CELL(1) + CELL(102);
		CELL(100) ⇐ CELL(100) × 10;
	BLOCK 1: END;
	CELL(0) ⇐ M × CELL(100);
	CELL(0) ⇐ CELL(0) + CELL(1);
	IF CELL(0) = N, THEN:
	OUTPUT ⇐ YES;
BLOCK 0: END.

DEFINE PROCEDURE ''RULE-THREE-DERIVES?'' [M,N]:
BLOCK 0: BEGIN
	CELL(0) ⇐ M;
	CELL(100) ⇐ 1;
	LOOP AT MOST CELL(0) TIMES:
	BLOCK 1: BEGIN
		IF CELL(0) = 0, THEN:
		QUIT BLOCK 0;
		IF REMAINDER [CELL(0),1000] = 111, THEN:
		BLOCK 2: BEGIN
			CELL(103) ⇐ DIVIDE [CELL(0),1000] × CELL(100);
			CELL(103) ⇐ CELL(103) × 10;
			CELL(103) ⇐ CELL(103) + CELL(1);
			IF CELL(103) = N, THEN:
			BLOCK 3: BEGIN
				OUTPUT ⇐ YES;
				QUIT BLOCK 0;
			BLOCK 3: END;
		BLOCK 2: END;
		CELL(101) ⇐ REMAINDER [CELL(0), 10];
		CELL(0) ⇐ DIVIDE [CELL(0),10];
		CELL(102) ⇐ CELL(100) × CELL(101);
		CELL(1) ⇐ CELL(1) + CELL(102);
		CELL(100) ⇐ CELL(100) × 10;
	BLOCK 1: END;
BLOCK 0: END.

DEFINE PROCEDURE ''RULE-FOUR-DERIVES?'' [M,N]:
BLOCK 0: BEGIN
	CELL(0) ⇐ M;
	CELL(100) ⇐ 1;
	LOOP AT MOST CELL(0) TIMES:
	BLOCK 1: BEGIN
		IF CELL(0) = 0, THEN:
		QUIT BLOCK 0;
		IF REMAINDER [CELL(0),100] = 0, THEN:
		BLOCK 2: BEGIN
			CELL(103) ⇐ DIVIDE [CELL(0),100] × CELL(100);
			CELL(103) ⇐ CELL(103) + CELL(1);
			IF CELL(103) = N, THEN:
			BLOCK 3: BEGIN
				OUTPUT ⇐ YES;
				QUIT BLOCK 0;
			BLOCK 3: END;
		BLOCK 2: END;
		CELL(101) ⇐ REMAINDER [CELL(0), 10];
		CELL(0) ⇐ DIVIDE [CELL(0),10];
		CELL(102) ⇐ CELL(100) × CELL(101);
		CELL(1) ⇐ CELL(1) + CELL(102);
		CELL(100) ⇐ CELL(100) × 10;
	BLOCK 1: END;
BLOCK 0: END.

DEFINE PROCEDURE ''DERIVES?'' [M,N]:
BLOCK 0: BEGIN
	IF N = 31, THEN:
	BLOCK 1: BEGIN
		OUTPUT ⇐ YES;
		QUIT BLOCK 0;
	BLOCK 1: END;
	IF RULE-ONE-DERIVES? [M,N], THEN:
	BLOCK 2: BEGIN
		OUTPUT ⇐ YES;
		QUIT BLOCK 0;
	BLOCK 2: END;
	IF RULE-TWO-DERIVES? [M,N], THEN:
	BLOCK 3: BEGIN
		OUTPUT ⇐ YES;
		QUIT BLOCK 0;
	BLOCK 3: END;
	IF RULE-THREE-DERIVES? [M,N], THEN:
	BLOCK 4: BEGIN
		OUTPUT ⇐ YES;
		QUIT BLOCK 0;
	BLOCK 4: END;
	IF RULE-FOUR-DERIVES? [M,N], THEN:
	BLOCK 5: BEGIN
		OUTPUT ⇐ YES;
		QUIT BLOCK 0;
	BLOCK 5: END;
BLOCK 0: END.

DEFINE PROCEDURE ''NOT-DERIVES?'' [M,N]:
BLOCK 0: BEGIN
	OUTPUT ⇐ YES;
	IF DERIVES? [M,N], THEN:
	OUTPUT ⇐ NO;
BLOCK 0: END.

DEFINE PROCEDURE ''MIU-PROOF-PAIR?'' [M,N]:
BLOCK 0: BEGIN
	CELL(0) ⇐ M;
	CELL(100) ⇐ 1;
	LOOP AT MOST CELL(0) TIMES:
	BLOCK 1: BEGIN
		IF CELL(0) = 0, THEN:
		ABORT LOOP 1;
		CELL(101) ⇐ REMAINDER [CELL(0), 10];
		CELL(0) ⇐ DIVIDE [CELL(0),10];
		CELL(102) ⇐ CELL(100) × CELL(101);
		CELL(2) ⇐ CELL(2) + CELL(102);
		CELL(100) ⇐ CELL(100) × 10;
		IF CELL(101) = 3, THEN:
		ABORT LOOP 1;
	BLOCK 1: END;

	CELL(3) ⇐ CELL(2);

	LOOP AT MOST CELL(0) TIMES:
	BLOCK 2: BEGIN
		IF CELL(0) = 0, THEN:
		ABORT LOOP 2;
		CELL(1) ⇐ CELL(2);
		CELL(2) ⇐ 0;
		CELL(100) ⇐ 1;
		LOOP AT MOST CELL(0) TIMES:
		BLOCK 3: BEGIN
			IF CELL(0) = 0, THEN:
			ABORT LOOP 3;
			CELL(101) ⇐ REMAINDER [CELL(0), 10];
			CELL(0) ⇐ DIVIDE [CELL(0),10];
			CELL(102) ⇐ CELL(100) × CELL(101);
			CELL(2) ⇐ CELL(2) + CELL(102);
			CELL(100) ⇐ CELL(100) × 10;
			IF CELL(102) = 3, THEN:
			ABORT LOOP 3;
		BLOCK 3: END;
		IF NOT-DERIVES? [CELL(2), CELL(1)], THEN:
		QUIT BLOCK 0;
	BLOCK 2: END;

	IF NOT-DERIVES? [0, CELL(2)], THEN:
	QUIT BLOCK 0;

	IF CELL(3) = N, THEN:
	OUTPUT ⇐ YES;
BLOCK 0: END.
