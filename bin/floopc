#!/usr/bin/env node

var fs      = require('fs');
var temp    = require('temp');
var parser  = require('../lib/parse.js');
var jsgen   = require('../lib/jsgen.js');
var lljsgen = require('../lib/lljsgen.js');
var exec    = require('child_process').exec;

var argv = require('optimist')
    .usage('$0 [options] <file>')
    .demand(1)
    .default('b', 'asmjs')
    .boolean('a')
    .boolean('p')
    .alias('b', 'backend')
    .alias('e', 'exported-funcs')
    .alias('m', 'module-name')
    .alias('a', 'ast')
    .alias('p', 'parse')
    .describe('b', 'Backend to use for code generation [asmjs, js, lljs]')
    .describe('e', 'The functions to export (comma-delimited)')
    .describe('a', 'Print only an ast')
    .describe('p', 'Parse only')
    .describe('m', 'Export the module with this name')
    .argv
;

function main() {
  var input = argv._[0];
  var ast = parser.parse(fs.readFileSync(input, 'utf8'));

  // parse and return
  if(argv.p) return;

  // print ast and return
  if(argv.a) {
    console.log(ast.toAst());
    return;
  }

  var options = argv;

  if (argv.b === 'asmjs') {
    // open a temp file for ljc to process
    temp.open('temp-lljs', function(err, info) {
      var source = lljsgen(ast, options);

      var ljcPath = process.env.LJC_PATH || 'ljc';

      fs.write(info.fd, source);
      fs.close(info.fd, function(err) {
        var args = '';
        if (options.e) args += ' -e ' + options.e + ',main';
        if (options.m) args += ' -m ' + options.m;

        exec(ljcPath + args + ' ' + info.path, { env: process.env }, function(err, stdout) {
          console.log(stdout.trim());
        });

      });
    });

  } else if (argv.b === 'lljs') {
    console.log(lljsgen(ast, options));

  } else if (argv.b === 'js') {
    console.log(jsgen(ast, options));

  } else if (argv.b) {
    throw new Error('Unknown backend: ' + argv.b);
  }

}

main();
